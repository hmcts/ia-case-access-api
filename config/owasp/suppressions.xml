<?xml version="1.0" encoding="UTF-8"?>
<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
  <suppress until="2024-06-01">
    <notes><![CDATA[
            This vulnerability is about potential Remote Code Execution when serializing and deserializing Java classes
            using HttpInvokerServiceExport and org.springframework.remoting.
            As we don't use those constructs, we are not affected by it.
            The suppression will be a long-term one. An expiry to the suppression is kept to allow re-evaluating whether
            we're still unaffected by it.
        ]]></notes>
    <cve>CVE-2016-1000027</cve>
  </suppress>
  <suppress until="2024-06-01">
    <notes>![CDATA[
      False positive - https://github.com/jeremylong/DependencyCheck/issues/5502

      We don't use the libraries affected by this vulnerability. This is a false positive in dependencycheck that is still current in version 8.2.1.
      Try to remove it when a dependencycheck upgrade becomes available.
      If it still happens, check that we don't use hutool-json and json-java. If we don't, extend the suppression date by another year.
      ]]</notes>
    <cve>CVE-2022-45688</cve>
  </suppress>
  <suppress>
    <notes>False positive spring-security-crypto-5.7.1.jar</notes>
    <cve>CVE-2020-5408</cve>
  </suppress>
  <suppress>
    <!-- A temp directory creation vulnerability exists in all versions of Guava, allowing an attacker
    with access to the machine to potentially access data in a temporary directory created by the Guava API
    com.google.common.io.Files.createTempDir(). By default, on unix-like systems,
    the created directory is world-readable (readable by an attacker with access to the system). The method in question
     has been marked @Deprecated in versions 30.0 and later and should not be used. For Android developers,
      we recommend choosing a temporary directory API provided by Android, such as context.getCacheDir().
      For other Java developers, we recommend migrating to the Java 7 API java.nio.file.Files.createTempDirectory()
      which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir
      system property to point to a location whose permissions are appropriately configured.-->
    <notes><![CDATA[
            This CVE is for an older version of guava which only the checkstyle gradle plugin is currently using.
        ]]></notes>
    <packageUrl regex="true">^pkg:maven/com.google.guava/guava@.*$</packageUrl>
    <cve>CVE-2020-8908</cve>
  </suppress>
  <!-- The following CVEs are suppressed for the purpose of getting the current PR onto the preview environment
 They should still be addressed -->
  <suppress until="2023-05-27">
    <notes><![CDATA[
                  file name: json-smart-2.4.8.jar
                ]]>
    </notes>
    <cve>CVE-2021-31684</cve>
    <cve>CVE-2023-1370</cve>
  </suppress>
  <suppress until="2023-08-30">
    <cve>CVE-2023-35116</cve>
    <cve>CVE-2023-34981</cve>
    <cve>CVE-2023-28709</cve>
    <cve>CVE-2023-20863</cve>
    <cve>CVE-2023-20862</cve>
    <cve>CVE-2023-20861</cve>
    <cve>CVE-2023-20860</cve>
    <cve>CVE-2023-20873</cve>
    <cve>CVE-2023-20883</cve>
    <cve>CVE-2023-2976</cve>
    <cve>CVE-2022-45143</cve>
    <cve>CVE-2022-42252</cve>
    <cve>CVE-2022-42004</cve>
    <cve>CVE-2022-42003</cve>
    <cve>CVE-2022-41854</cve>
    <cve>CVE-2022-38752</cve>
    <cve>CVE-2022-38751</cve>
    <cve>CVE-2022-38750</cve>
    <cve>CVE-2022-38749</cve>
    <cve>CVE-2022-34305</cve>
    <cve>CVE-2022-31692</cve>
    <cve>CVE-2022-31690</cve>
    <cve>CVE-2022-29885</cve>
    <cve>CVE-2022-25857</cve>
    <cve>CVE-2022-22978</cve>
    <cve>CVE-2022-22976</cve>
    <cve>CVE-2022-22971</cve>
    <cve>CVE-2022-22970</cve>
    <cve>CVE-2022-22968</cve>
    <cve>CVE-2022-22965</cve>
    <cve>CVE-2022-22950</cve>
    <cve>CVE-2022-3064</cve>
    <cve>CVE-2022-1471</cve>
    <cve>CVE-2021-46877</cve>
    <cve>CVE-2021-43980</cve>
    <cve>CVE-2021-37533</cve>
    <cve>CVE-2021-28170</cve>
    <cve>CVE-2021-22119</cve>
    <cve>CVE-2021-22118</cve>
    <cve>CVE-2021-22096</cve>
    <cve>CVE-2021-22060</cve>
    <cve>CVE-2021-22053</cve>
    <cve>CVE-2021-22044</cve>
    <cve>CVE-2021-4277</cve>
    <cve>CVE-2021-4235</cve>
    <cve>CVE-2020-36518</cve>
    <cve>CVE-2020-15522</cve>
    <cve>CVE-2020-5412</cve>
  </suppress>

  <!-- end of temporary suppressions -->

</suppressions>

