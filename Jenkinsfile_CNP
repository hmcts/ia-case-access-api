#!groovy
properties([
    [$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/ia-case-access-api.git'],
    pipelineTriggers([[$class: 'GitHubPushTrigger']])
])


@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"
def product = "ia"
def component = "case-access-api"

def secrets = [
    'ia-${env}': [


        secret('s2s-url', 'S2S_URL'),
        secret('launch-darkly-sdk-key', 'LAUNCH_DARKLY_SDK_KEY'),
        secret('s2s-secret', 'IA_S2S_SECRET'),
        secret('s2s-microservice', 'IA_S2S_MICROSERVICE'),
        secret('system-username', 'IA_SYSTEM_USERNAME'),
        secret('system-password', 'IA_SYSTEM_PASSWORD'),
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withPipeline(type, product, component) {
    env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
    enableAksStagingDeployment()
    disableLegacyDeployment()
    loadVaultSecrets(secrets)

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    enableSlackNotifications('#ia-tech')

    onMaster() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }
    onPR() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }
}
